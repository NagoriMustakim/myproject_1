{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "name": "setNum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa49d61bf65bc0a2c1229952314492b6041cf00221c00a88626953f205e1ff9a5",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "162871",
    "logsBloom": "0x
    "blockHash": "0x360143784c399401065363a19a828112e6b1ae10193d8a3d3bd195095fc1ef53",
    "transactionHash": "0xa49d61bf65bc0a2c1229952314492b6041cf00221c00a88626953f205e1ff9a5",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "162871",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2daa4ea8ec2451c36a7084631bd8462f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"setNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Mustakim Nagori\",\"details\":\"this implement two functions get and sum\",\"kind\":\"dev\",\"methods\":{\"setNum(uint256,uint256)\":{\"details\":\"this setNum function will set the value \"},\"sum()\":{\"details\":\"this sum function will add num1 & num2\",\"returns\":{\"_0\":\", the sum of two number\"}}},\"title\":\"THe contract add two Numbers\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This simple contract will add two Numbers and purpose behind is to understand the stuff\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/add.sol\":\"add\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/add.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//pragma\\npragma solidity ^0.8.0;\\n\\n/**@title THe contract add two Numbers\\n *@author Mustakim Nagori\\n *@notice This simple contract will add two Numbers and purpose behind is to understand the stuff\\n *@dev this implement two functions get and sum\\n */\\n// contract\\ncontract add {\\n    uint256 num1;\\n    uint256 num2;\\n\\n    // public function\\n    ///@dev this setNum function will set the value \\n    function setNum(uint256 x, uint256 y) public {\\n        num1 = x;\\n        num2 = y;\\n    }\\n\\n    ///@dev this sum function will add num1 & num2\\n    ///@return , the sum of two number\\n    function sum() public view returns (uint256) {\\n        return num1 + num2;\\n    }\\n}\\n\",\"keccak256\":\"0x6f6347c3ee554868b1bcfbdcee4babad6f51094bc7c8b2919a23b637c7adb34e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506101fe806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063782c523b1461003b578063853255cc14610057575b600080fd5b610055600480360381019061005091906100d9565b610075565b005b61005f610087565b60405161006c9190610128565b60405180910390f35b81600081905550806001819055505050565b60006001546000546100999190610172565b905090565b600080fd5b6000819050919050565b6100b6816100a3565b81146100c157600080fd5b50565b6000813590506100d3816100ad565b92915050565b600080604083850312156100f0576100ef61009e565b5b60006100fe858286016100c4565b925050602061010f858286016100c4565b9150509250929050565b610122816100a3565b82525050565b600060208201905061013d6000830184610119565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061017d826100a3565b9150610188836100a3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156101bd576101bc610143565b5b82820190509291505056fea2646970667358221220d90360c3de3fd341035cc0b5e8082c2fa353b8c2f9252b3f5b60a86c15db36c864736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063782c523b1461003b578063853255cc14610057575b600080fd5b610055600480360381019061005091906100d9565b610075565b005b61005f610087565b60405161006c9190610128565b60405180910390f35b81600081905550806001819055505050565b60006001546000546100999190610172565b905090565b600080fd5b6000819050919050565b6100b6816100a3565b81146100c157600080fd5b50565b6000813590506100d3816100ad565b92915050565b600080604083850312156100f0576100ef61009e565b5b60006100fe858286016100c4565b925050602061010f858286016100c4565b9150509250929050565b610122816100a3565b82525050565b600060208201905061013d6000830184610119565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061017d826100a3565b9150610188836100a3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156101bd576101bc610143565b5b82820190509291505056fea2646970667358221220d90360c3de3fd341035cc0b5e8082c2fa353b8c2f9252b3f5b60a86c15db36c864736f6c63430008090033",
  "devdoc": {
    "author": "Mustakim Nagori",
    "details": "this implement two functions get and sum",
    "kind": "dev",
    "methods": {
      "setNum(uint256,uint256)": {
        "details": "this setNum function will set the value "
      },
      "sum()": {
        "details": "this sum function will add num1 & num2",
        "returns": {
          "_0": ", the sum of two number"
        }
      }
    },
    "title": "THe contract add two Numbers",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This simple contract will add two Numbers and purpose behind is to understand the stuff",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4,
        "contract": "contracts/add.sol:add",
        "label": "num1",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 6,
        "contract": "contracts/add.sol:add",
        "label": "num2",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}